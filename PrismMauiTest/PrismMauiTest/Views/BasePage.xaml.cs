using Microsoft.Maui.Controls.PlatformConfiguration;using Microsoft.Maui.Controls.PlatformConfiguration.iOSSpecific;namespace PrismMauiTest.Views{    [XamlCompilation(XamlCompilationOptions.Compile)]    public partial class BasePage    {        public static readonly BindableProperty BackButtonTitleProperty = BindableProperty.Create(nameof(BackButtonTitle), typeof(string), typeof(BasePage));        public static readonly BindableProperty HeadlineTemplateProperty = BindableProperty.Create(nameof(HeadlineTemplate), typeof(View), typeof(BasePage));        public static readonly BindableProperty ShowBackButtonProperty = BindableProperty.Create(nameof(ShowBackButton), typeof(bool), typeof(BasePage), true);        public static readonly BindableProperty HideHeaderProperty = BindableProperty.Create(nameof(HideHeader), typeof(bool), typeof(BasePage));        public static readonly BindableProperty ToolbarTemplateProperty = BindableProperty.Create(nameof(ToolbarTemplate), typeof(View), typeof(BasePage));        public View ToolbarTemplate        {            get => (View)GetValue(ToolbarTemplateProperty);            set => SetValue(ToolbarTemplateProperty, value);        }        private static readonly BindableProperty HeaderMarginProperty =            BindableProperty.Create(nameof(HeaderMargin), typeof(Thickness), typeof(TabBasePage),                new Thickness(0));        public View HeadlineTemplate        {            get => (View)GetValue(HeadlineTemplateProperty);            set => SetValue(HeadlineTemplateProperty, value);        }        public Thickness HeaderMargin => (Thickness) GetValue(HeaderMarginProperty);        public string BackButtonTitle        {            get => (string) GetValue(BackButtonTitleProperty);            set => SetValue(BackButtonTitleProperty, value);        }                public bool ShowBackButton        {            get => (bool) GetValue(ShowBackButtonProperty);            set => SetValue(ShowBackButtonProperty, value);        }                public bool HideHeader        {            get => (bool) GetValue(HideHeaderProperty);            set => SetValue(HideHeaderProperty, value);        }                protected override void OnBindingContextChanged()        {            if (HeadlineTemplate != null)                On<iOS>().SetUseSafeArea(true);            base.OnBindingContextChanged();        }        protected override void OnPropertyChanged(string propertyName = null)        {            base.OnPropertyChanged(propertyName);            if (propertyName != "SafeAreaInsets")            {                return;            }            if (!On<iOS>().UsingSafeArea())            {                return;            }                        var insets = On<iOS>().SafeAreaInsets();            On<iOS>().SetUseSafeArea(false);            var margin = new Thickness(0, insets.Top, 0, 0);            SetValue(HeaderMarginProperty, margin);        }                public BasePage()        {            InitializeComponent();        }    }}